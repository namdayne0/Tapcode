const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const util = require('minecraft-server-util'); // Import g√≥i minecraft-server-util

module.exports = {
    // ƒê·ªãnh nghƒ©a Slash Command
    data: new SlashCommandBuilder()
        .setName('server')
        .setDescription('Ki·ªÉm tra tr·∫°ng th√°i c·ªßa m√°y ch·ªß Minecraft.')
        .addStringOption(option =>
            option.setName('ip')
                .setDescription('ƒê·ªãa ch·ªâ IP ho·∫∑c t√™n mi·ªÅn c·ªßa m√°y ch·ªß Minecraft (v√≠ d·ª•: play.hypixel.net)')
                .setRequired(true)), // B·∫Øt bu·ªôc ph·∫£i c√≥ IP

    // H√†m th·ª±c thi khi l·ªánh ƒë∆∞·ª£c g·ªçi
    async execute(interaction) {
        await interaction.deferReply(); // T·∫°m th·ªùi ho√£n ph·∫£n h·ªìi v√¨ c√≥ th·ªÉ m·∫•t ch√∫t th·ªùi gian ƒë·ªÉ ping server

        const ip = interaction.options.getString('ip');
        const defaultPort = 25565; // C·ªïng m·∫∑c ƒë·ªãnh c·ªßa Minecraft

        try {
            // T√°ch IP v√† c·ªïng n·∫øu ng∆∞·ªùi d√πng nh·∫≠p d·∫°ng "ip:port"
            let host = ip;
            let port = defaultPort;

            if (ip.includes(':')) {
                const parts = ip.split(':');
                host = parts[0];
                port = parseInt(parts[1], 10);
                if (isNaN(port)) {
                    port = defaultPort; // N·∫øu c·ªïng kh√¥ng h·ª£p l·ªá, d√πng c·ªïng m·∫∑c ƒë·ªãnh
                }
            }

            // Ping m√°y ch·ªß Minecraft
            const result = await util.status(host, port, { timeout: 5000 }); // Th√™m timeout 5 gi√¢y

            // T·∫°o Embed hi·ªÉn th·ªã th√¥ng tin
            const serverEmbed = new EmbedBuilder()
                .setColor(0x00FF00) // M√†u xanh l√° c√¢y
                .setTitle(`üåç Tr·∫°ng Th√°i M√°y Ch·ªß Minecraft: \`${host}:${port}\``)
                .setThumbnail('https://cdn.discordapp.com/attachments/YOUR_ATTACHMENT_ID/MINECRAFT_LOGO.png?ex=666eb994&is=666d6814&hm=45f0d922a96752396e95123512e84841961e6c3fef04e0e4b85c1926639d679d&') // Thay b·∫±ng URL icon Minecraft ƒë·∫πp m·∫Øt n·∫øu c√≥
                .addFields(
                    { name: 'Tr·∫°ng Th√°i', value: 'üü¢ **ONLINE**', inline: true },
                    { name: 'Ping', value: `${result.ping}ms`, inline: true },
                    { name: '\u200B', value: '\u200B', inline: true }, // Kho·∫£ng tr·ªëng
                    { name: 'Phi√™n b·∫£n', value: `\`${result.version.name_clean || 'N/A'}\``, inline: true },
                    { name: 'Ng∆∞·ªùi ch∆°i', value: `\`${result.players.online}/${result.players.max}\``, inline: true },
                    { name: '\u200B', value: '\u200B', inline: true }, // Kho·∫£ng tr·ªëng
                )
                .setTimestamp()
                .setFooter({ text: `Y√™u c·∫ßu b·ªüi ${interaction.user.tag}` });

            // Ki·ªÉm tra v√† th√™m TPS n·∫øu c√≥
            if (result.tps) { // M·ªôt s·ªë server (Spigot/Paper) c√≥ th·ªÉ tr·∫£ v·ªÅ TPS
                serverEmbed.addFields(
                    { name: 'TPS (Ticks Per Second)', value: `\`${result.tps.toFixed(2)}\``, inline: true }
                );
            }

            // Th√™m MOTD (Message of the Day) c·ªßa server
            if (result.motd.clean) {
                serverEmbed.setDescription(`*MOTD: ${result.motd.clean.substring(0, 200)}${result.motd.clean.length > 200 ? '...' : ''}*`);
            }
            
            await interaction.editReply({ embeds: [serverEmbed] }); // Ch·ªânh s·ª≠a ph·∫£n h·ªìi ban ƒë·∫ßu
        } catch (error) {
            console.error(`L·ªói khi ping server ${ip}:`, error);
            const errorEmbed = new EmbedBuilder()
                .setColor(0xFF0000) // M√†u ƒë·ªè
                .setTitle('M√°y Ch·ªß Minecraft')
                .setDescription(`‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ho·∫∑c t√¨m th·∫•y m√°y ch·ªß \`${ip}\`.`)
                .addFields(
                    { name: 'L√Ω do c√≥ th·ªÉ', value: '1. M√°y ch·ªß offline\n2. Sai ƒë·ªãa ch·ªâ IP/c·ªïng\n3. M√°y ch·ªß ch·∫∑n ping' }
                )
                .setFooter({ text: `Y√™u c·∫ßu b·ªüi ${interaction.user.tag}` })
                .setTimestamp();
            await interaction.editReply({ embeds: [errorEmbed] }); // Ch·ªânh s·ª≠a ph·∫£n h·ªìi l·ªói
        }
    },
};