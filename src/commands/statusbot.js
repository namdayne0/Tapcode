const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const os = require('os'); // ƒê·ªÉ l·∫•y th√¥ng tin h·ªá th·ªëng

module.exports = {
    data: new SlashCommandBuilder()
        .setName('statusbot')
        .setDescription('Hi·ªÉn th·ªã th√¥ng tin tr·∫°ng th√°i c·ªßa bot (CPU, RAM, th·ªùi gian ho·∫°t ƒë·ªông).'),
    async execute(interaction) {
        // L·∫•y th·ªùi gian ho·∫°t ƒë·ªông c·ªßa bot
        const uptimeSeconds = process.uptime();
        const days = Math.floor(uptimeSeconds / (3600 * 24));
        const hours = Math.floor((uptimeSeconds % (3600 * 24)) / 3600);
        const minutes = Math.floor((uptimeSeconds % 3600) / 60);
        const seconds = Math.floor(uptimeSeconds % 60);
        const botUptime = `${days}d ${hours}h ${minutes}m ${seconds}s`;

        // L·∫•y th√¥ng tin RAM
        const totalMemory = os.totalmem(); // T·ªïng RAM h·ªá th·ªëng (bytes)
        const freeMemory = os.freemem();   // RAM tr·ªëng h·ªá th·ªëng (bytes)
        const usedMemory = totalMemory - freeMemory;
        const nodeUsedMemory = process.memoryUsage().heapUsed; // RAM bot Node.js ƒëang s·ª≠ d·ª•ng

        // Chuy·ªÉn ƒë·ªïi sang GB v√† MB
        const totalMemoryGB = (totalMemory / (1024 ** 3)).toFixed(2);
        const usedMemoryGB = (usedMemory / (1024 ** 3)).toFixed(2);
        const nodeUsedMemoryMB = (nodeUsedMemory / (1024 ** 2)).toFixed(2);

        // L·∫•y th√¥ng tin CPU
        const cpus = os.cpus();
        const cpuModel = cpus[0].model;
        const cpuCores = cpus.length;

        // T√≠nh to√°n m·ª©c s·ª≠ d·ª•ng CPU (load average)
        const loadAvg = os.loadavg(); // [1 ph√∫t, 5 ph√∫t, 15 ph√∫t]

        // L·∫•y ping c·ªßa bot (ƒë·ªô tr·ªÖ API)
        const ping = Math.round(interaction.client.ws.ping);

        // T·∫°o Embed
        const statusEmbed = new EmbedBuilder()
            .setColor(0x0099FF) // M√†u xanh lam
            .setTitle('üìä Tr·∫°ng Th√°i Bot')
            .setThumbnail(interaction.client.user.displayAvatarURL()) // Avatar c·ªßa bot
            .addFields(
                { name: 'üåê Ping API', value: `${ping}ms`, inline: true },
                { name: '‚è∞ Th·ªùi gian ho·∫°t ƒë·ªông', value: `${botUptime}`, inline: true },
                { name: '\u200B', value: '\u200B', inline: true }, // Kho·∫£ng tr·ªëng
                { name: 'üíª CPU', value: `\`${cpuModel} (${cpuCores} cores)\``, inline: true },
                { name: 'üìà T·∫£i CPU (1/5/15 ph√∫t)', value: `\`${loadAvg[0].toFixed(2)} / ${loadAvg[1].toFixed(2)} / ${loadAvg[2].toFixed(2)}\``, inline: true },
                { name: '\u200B', value: '\u200B', inline: true }, // Kho·∫£ng tr·ªëng
                { name: 'üíæ RAM H·ªá Th·ªëng', value: `\`${usedMemoryGB}GB / ${totalMemoryGB}GB\``, inline: true },
                { name: 'üß† RAM Bot ƒêang D√πng', value: `\`${nodeUsedMemoryMB}MB\``, inline: true },
                { name: '\u200B', value: '\u200B', inline: true }, // Kho·∫£ng tr·ªëng
            )
            .setTimestamp() // Th√™m th·ªùi gian hi·ªán t·∫°i
            .setFooter({ text: `Y√™u c·∫ßu b·ªüi ${interaction.user.tag}` });

        await interaction.reply({ embeds: [statusEmbed] });
    },
};